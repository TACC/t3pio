#!/usr/bin/env lua
-- -*- lua -*-

t = {}
Version = "0.0"

require("strict")
require("pairsByKeys")
require("string_split")
local Dbg       = require("Dbg")
local Optiks    = require("Optiks")
local concatTbl = table.concat
local huge      = math.huge
local master    = {}
local max       = math.max
local min       = math.min
local load      = (_VERSION == "Lua 5.1") and loadstring or load
local dbg       = Dbg:dbg()


local axisT = {
   nWritersPer = "Number of Writer Per Node",
   fileSz      = "File Size in GBytes",
   fileSzGB    = "File Size in GBytes",
   nstripes    = "Number of Stripes",
   stripeSz    = "Stripe Size in MBytes",
   stripeSzMB  = "Stripe Size in MBytes",
   iounits     = "Number of Writers",
   lSz         = "Local Cube Size",
   gSz         = "Global Cube Size",
   factor      = "Stripes/Writers",
   rate        = "Tranfer Rate (in MB/sec)",
}

function masterTbl()
   return master
end

function main()

   options()
   local masterTbl   = masterTbl()
   
   if (masterTbl.debug) then
      dbg:activateDebug(1)
   end

   if (masterTbl.yaxis) then
      build3D()
   else
      build2D()
   end
end

function read_T3PIO_results()
   local masterTbl   = masterTbl()
   local a = {}
   a[#a+1] = "t = {"

   for i = 1,#masterTbl.pargs do
      local resultFn = masterTbl.pargs[i]
      local f        = assert(io.open(resultFn,"r"))

      local whole    = f:read("*all")
      f:close()
      
      for line in whole:split("\n") do
         if (line:find("^%%")) then
            a[#a+1] = line:sub(3)
         end
      end
   end

   a[#a+1] = "}"
   local s = concatTbl(a,"\n")

   assert(load(s))()
   return t
end



function build2D()
   local masterTbl = masterTbl()
   local t         = read_T3PIO_results()
   local resultT   = {}

   local xx     = masterTbl.xaxis
   local xlabel = "set xlabel \"" .. axisT[xx] .. "\""

   dbg.print("number of entries: ",#t,"\n")

   for i = 1,#t do
      local entry   = t[i]
      local x
      if (xx ~= "factor") then
         x = entry[xx]
      else
         x = math.floor(entry.nstripes/entry.iounits+0.5)
      end

      local e       = resultT[x] or {count = 0, rate= 0, min = huge, max = 0 }
      local rate    = entry.rate

      e.count     = e.count + 1
      e.rate      = e.rate + rate
      e.min       = min(e.min, rate)
      e.max       = max(e.max, rate)

      if (e.count == 1) then
         dbg.print("x:", x, " rate: ", rate,"\n")
      end

      resultT[x]  = e
   end
   
   local fn = "avg.data"
   local f  = io.open(fn,"w")

   for k, v in pairsByKeys(resultT) do
      local rate = v.rate/v.count
      f:write(k, "\t",rate,"\n")
   end
   f:close()
   

   fn = "min.data"
   f  = io.open(fn,"w")

   for k, v in pairsByKeys(resultT) do
      local rate = v.min
      f:write(k, "\t",rate,"\n")
   end
   f:close()
   
   fn = "max.data"
   f  = io.open(fn,"w")

   for k, v in pairsByKeys(resultT) do
      local rate = v.max
      f:write(k, "\t",rate,"\n")
   end
   f:close()

   local a = {}
   a[#a+1] = xlabel
   a[#a+1] = "set ylabel \"Rate (in MB/sec)\""
   a[#a+1] = "set key left top"
   a[#a+1] = "set term png"
   a[#a+1] = "set output 'graph.png'"
   if(masterTbl.title) then
      a[#a+1] = "set title '" .. masterTbl.title .. "'"
   end
   
   a[#a+1] = "plot 'avg.data' title 'Avg Rate' with linespoints lw 2, \\"
   a[#a+1] = "     'min.data' title 'Min Rate' with linespoints lw 2, \\"
   a[#a+1] = "     'max.data' title 'Max Rate' with linespoints lw 2"

   local s = concatTbl(a,"\n")

   fn = "plot.gp"
   f  = io.open(fn,"w")
   f:write(s)
   f:close()

   os.execute("gnuplot plot.gp")
end

function build3D()
   local masterTbl = masterTbl()
   local t         = read_T3PIO_results()
   local resultT   = {}

   local xx     = masterTbl.xaxis
   local yy     = masterTbl.yaxis
   if (not axisT[xx] ) then
      io.stdout:write("X-axis: \"",xx,"\" is unknown\n")
      os.exit(1)
   end

   if (not axisT[yy] ) then
      io.stdout:write("Y-axis: \"",yy,"\" is unknown\n")
      os.exit(1)
   end


   local xlabel = "set xlabel \"" .. axisT[xx] .. "\""
   local ylabel = "set ylabel \"" .. axisT[yy] .. "\""
   local zlabel = "set zlabel \"" .. axisT.rate .. "\""

   for i = 1,#t do
      local entry = t[i]
      local x  = entry[xx]
      local y  = entry[yy]

      local rT   = resultT[x] or {}
      resultT[x] = rT

      local e    = resultT[x][y] or {count = 0, rate= 0, min = huge, max = 0 }
      local rate = entry.rate
      e.count    = e.count + 1
      e.rate     = e.rate + rate
      e.min      = min(e.min, rate)
      e.max      = max(e.max, rate)

      if (e.count == 1) then
         dbg.print("x:", x," y: ",y, " rate: ", rate,"\n")
      end

      resultT[x][y] = e
   end

   local fn = "avg.data"
   local f  = io.open(fn,"w")

   for kk, vv  in pairsByKeys(resultT) do
      for k, v in pairsByKeys(vv) do
         local rate = v.rate/v.count
         f:write(kk, "\t", k, "\t", rate,"\n")
      end
      f:write("\n")
   end
   f:close()

   fn = "min.data"
   f  = io.open(fn,"w")
   for kk, vv  in pairsByKeys(resultT) do
      for k, v in pairsByKeys(vv) do
         f:write(kk, "\t", k, "\t", v.min,"\n")
      end
      f:write("\n")
   end
   f:close()

   fn = "max.data"
   f  = io.open(fn,"w")
   for kk, vv  in pairsByKeys(resultT) do
      for k, v in pairsByKeys(vv) do
         f:write(kk, "\t", k, "\t", v.max,"\n")
      end
      f:write("\n")
   end
   f:close()

   local a = {}
   a[#a+1] = xlabel
   a[#a+1] = ylabel
   a[#a+1] = zlabel

   a[#a+1] = "set clabel '%8.2f'"
   a[#a+1] = "set key right"
   a[#a+1] = 'set title "T3PIO Average"'
   a[#a+1] = "set term wxt"
   a[#a+1] = "set pm3d; set palette"
   a[#a+1] = "splot 'avg.data' using 1:2:3 with lines"
   local s = concatTbl(a,"\n")
   
   fn = "plotAvg.int.gp"
   f  = io.open(fn,"w")
   f:write(s)
   f:close()

   a       = {}
   a[#a+1] = xlabel
   a[#a+1] = ylabel
   a[#a+1] = zlabel

   a[#a+1] = "set clabel '%8.2f'"
   a[#a+1] = "set key right"
   a[#a+1] = 'set title "T3PIO Average"'
   a[#a+1] = "set term png"
   a[#a+1] = "set pm3d; set palette"
   a[#a+1] = "set output '3Davg.png'"
   a[#a+1] = "set pm3d; set palette"
   if(masterTbl.title) then
      a[#a+1] = "set title '" .. masterTbl.title .. " (Avg)'"
   end
   a[#a+1] = "splot 'avg.data' using 1:2:3 with lines"
   local s = concatTbl(a,"\n")
   
   fn = "plotAvg.gp"
   f  = io.open(fn,"w")
   f:write(s)
   f:close()

   os.execute("gnuplot plotAvg.gp")
   
   a = {}
   a[#a+1] = xlabel
   a[#a+1] = ylabel
   a[#a+1] = zlabel

   a[#a+1] = "set clabel '%8.2f'"
   a[#a+1] = "set key right"
   a[#a+1] = 'set title "T3PIO min"'
   if(masterTbl.title) then
      a[#a+1] = "set title '" .. masterTbl.title .. " (Min)'"
   end
   a[#a+1] = "set term wxt"
   a[#a+1] = "set pm3d; set palette"
   a[#a+1] = "splot 'min.data' using 1:2:3 with lines"
   s = concatTbl(a,"\n")
   
   fn = "plotMin.int.gp"
   f  = io.open(fn,"w")
   f:write(s)
   f:close()


   a = {}
   a[#a+1] = xlabel
   a[#a+1] = ylabel
   a[#a+1] = zlabel

   a[#a+1] = "set clabel '%8.2f'"
   a[#a+1] = "set key right"
   a[#a+1] = 'set title "T3PIO min"'
   a[#a+1] = "set term png"
   a[#a+1] = "set pm3d; set palette"
   if(masterTbl.title) then
      a[#a+1] = "set title '" .. masterTbl.title .. " (Min)'"
   end
   a[#a+1] = "set output '3Dmin.png'"
   a[#a+1] = "splot 'min.data' using 1:2:3 with lines"
   s = concatTbl(a,"\n")
   
   fn = "plotMin.gp"
   f  = io.open(fn,"w")
   f:write(s)
   f:close()

   os.execute("gnuplot plotMin.gp")
   
   a = {}
   a[#a+1] = xlabel
   a[#a+1] = ylabel
   a[#a+1] = zlabel

   a[#a+1] = "set clabel '%8.2f'"
   a[#a+1] = "set key right"
   a[#a+1] = 'set title "T3PIO max"'
   a[#a+1] = "set term wxt"
   a[#a+1] = "set pm3d; set palette"
   a[#a+1] = "splot 'max.data' using 1:2:3 with lines"
   s = concatTbl(a,"\n")
   
   fn = "plotMax.int.gp"
   f  = io.open(fn,"w")
   f:write(s)
   f:close()

   a = {}
   a[#a+1] = xlabel
   a[#a+1] = ylabel
   a[#a+1] = zlabel

   a[#a+1] = "set clabel '%8.2f'"
   a[#a+1] = "set key right"
   a[#a+1] = 'set title "T3PIO max"'
   a[#a+1] = "set term png"
   a[#a+1] = "set pm3d; set palette"
   
   if(masterTbl.title) then
      a[#a+1] = "set title '" .. masterTbl.title .. " (Max)'"
   end
   a[#a+1] = "set output '3Dmax.png'"
   a[#a+1] = "splot 'max.data' using 1:2:3 with lines"
   s = concatTbl(a,"\n")
   
   fn = "plotMax.gp"
   f  = io.open(fn,"w")
   f:write(s)
   f:close()

   os.execute("gnuplot plotMax.gp")
end


function options()
   local masterTbl = masterTbl()
   local usage         = "Usage: "
   local cmdlineParser = Optiks:new{usage=usage, version=Version}

   cmdlineParser:add_option{ 
      name   = {'-v','--verbose'},
      dest   = 'verbosityLevel',
      action = 'count',
   }

   cmdlineParser:add_option{ 
      name   = {'-D','--debug'},
      dest   = 'debug',
      action = 'store_true',
   }

   cmdlineParser:add_option{ 
      name    = {'-x',},
      dest    = 'xaxis',
      action  = 'store',
      default = 'fileSz',
   }

   cmdlineParser:add_option{ 
      name    = {'-y',},
      dest    = 'yaxis',
      action  = 'store',
   }

   cmdlineParser:add_option{ 
      name    = {'-t',},
      dest    = 'title',
      action  = 'store',
   }
   local optionTbl, pargs = cmdlineParser:parse(arg)

   for v in pairs(optionTbl) do
      masterTbl[v] = optionTbl[v]
   end
   masterTbl.pargs = pargs

end

main()
