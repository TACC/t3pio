#!/usr/bin/env lua
-- -*- lua -*-

t = {}
Version = "0.0"

require("strict")
require("pairsByKeys")
require("string_split")
local Dbg       = require("Dbg")
local Optiks    = require("Optiks")
local concatTbl = table.concat
local huge      = math.huge
local master    = {}
local max       = math.max
local min       = math.min
local load      = (_VERSION == "Lua 5.1") and loadstring or load
local dbg       = Dbg:dbg()


function masterTbl()
   return master
end

function main()

   options()
   local masterTbl   = masterTbl()
   
   if (masterTbl.debug) then
      dbg:activateDebug(1)
   end


   local a = {}
   a[#a+1] = "t = {"

   for i = 1,#masterTbl.pargs do
      local resultFn = masterTbl.pargs[i]
      local f        = assert(io.open(resultFn,"r"))

      local whole    = f:read("*all")
      f:close()
      
      for line in whole:split("\n") do
         if (line:find("^%%")) then
            a[#a+1] = line:sub(3)
         end
      end
   end

   a[#a+1] = "}"
   local s = concatTbl(a,"\n")

   assert(load(s))()
   
   local resultT = {}

   local xaxisT = {
      nWritersPer = "Number of Writer Per Node",
      fileSz      = "File Size in GBytes",
      nstripes    = "Number of Stripes",
      iounits     = "Number of Writers",
      lSz         = "Local Cube Size",
      gSz         = "Global Cube Size",
      factor      = "Stripes/Writers"
   }
      

   local xx     = masterTbl.xaxis
   local xlabel = "set xlabel \"" .. xaxisT[xx] .. "\""

   dbg.print("number of entries: ",#t,"\n")

   for i = 1,#t do
      local entry   = t[i]
      local x
      if (xx ~= "factor") then
         x = entry[xx]
      else
         x = math.floor(entry.nstripes/entry.iounits+0.5)
      end

      local e       = resultT[x] or {count = 0, rate= 0, min = huge, max = 0 }
      local rate    = entry.rate

      e.count     = e.count + 1
      e.rate      = e.rate + rate
      e.min       = min(e.min, rate)
      e.max       = max(e.max, rate)

      if (e.count == 1) then
         dbg.print("x:", x, " rate: ", rate,"\n")
      end

      resultT[x]  = e
   end
   
   local fn = "avg.data"
   local f  = io.open(fn,"w")

   for k, v in pairsByKeys(resultT) do
      local rate = v.rate/v.count
      f:write(k, "\t",rate,"\n")
   end
   f:close()
   

   fn = "min.data"
   f  = io.open(fn,"w")

   for k, v in pairsByKeys(resultT) do
      local rate = v.min
      f:write(k, "\t",rate,"\n")
   end
   f:close()
   
   fn = "max.data"
   f  = io.open(fn,"w")

   for k, v in pairsByKeys(resultT) do
      local rate = v.max
      f:write(k, "\t",rate,"\n")
   end
   f:close()

   a = {}
   a[#a+1] = xlabel
   a[#a+1] = "set ylabel \"Rate (in MB/sec)\""
   a[#a+1] = "set key left top"
   a[#a+1] = "set term png"
   a[#a+1] = "set output 'graph.png'"
   a[#a+1] = "plot 'avg.data' title 'Avg Rate' with linespoints lw 2, \\"
   a[#a+1] = "     'min.data' title 'Min Rate' with linespoints lw 2, \\"
   a[#a+1] = "     'max.data' title 'Max Rate' with linespoints lw 2"

   s = concatTbl(a,"\n")

   fn = "plot.data"
   f  = io.open(fn,"w")
   f:write(s)
   f:close()

   os.execute("gnuplot plot.data")


end

function options()
   local masterTbl = masterTbl()
   local usage         = "Usage: "
   local cmdlineParser = Optiks:new{usage=usage, version=Version}

   cmdlineParser:add_option{ 
      name   = {'-v','--verbose'},
      dest   = 'verbosityLevel',
      action = 'count',
   }

   cmdlineParser:add_option{ 
      name   = {'-D','--debug'},
      dest   = 'debug',
      action = 'store_true',
   }

   cmdlineParser:add_option{ 
      name    = {'-x',},
      dest    = 'xaxis',
      action  = 'store',
      default = 'fileSz',
   }
   local optionTbl, pargs = cmdlineParser:parse(arg)

   for v in pairs(optionTbl) do
      masterTbl[v] = optionTbl[v]
   end
   masterTbl.pargs = pargs

end

main()
