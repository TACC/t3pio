#!/usr/bin/env lua
-- -*- lua -*-
require("strict")
require("string_split")
require("VarDump")
local BeautifulTbl = require("BeautifulTbl")
local Dbg          = require("Dbg")
mesh               = {}
partition          = {}
nProcs             = nil

function partitionMesh(partition, nProcs)

   local fixed    = {}
   local variable = {}
   local nvar     = 0
   local results  = {}

   for i = 1,3 do
      local n = partition[i]
      if (n < 0) then
         nvar           = nvar + 1
         variable[nvar] = i
      else
         fixed[#fixed+1] = i
      end
   end

   if (nvar == 0) then
      return partition
   elseif (nvar == 1) then
      results[1] = { idx = fixed[1],    value = partition[fixed[1]]}
      results[2] = { idx = fixed[2],    value = partition[fixed[2]]}
      results[3] = { idx = variable[1], value = nProcs/ (partition[fixed[1]]*partition[fixed[2]]) }
   elseif (nvar == 2) then
      results[1] = { idx = fixed[1],    value = partition[fixed[1]]}
      local np   = nProcs/partition[fixed[1]]
      local yp   = math.sqrt(np)
      local exp  = math.floor(math.log(yp)/math.log(2.0))
      local pb   = math.pow(2.0, exp) + 1
      while (pb * math.floor(nProcs/pb) ~= nProcs) do
         pb = pb - 1
      end
      results[2] = { idx = variable[1], value = np/pb}
      results[3] = { idx = variable[2], value = pb}
   else
      local npz = math.floor(math.pow(nProcs, 1.0/3.0)) + 1
      while (npz * math.floor(nProcs/npz) ~= nProcs) do
         npz = npz - 1
      end
      local nprocXY = nProcs/npz
      local npy     = math.floor(math.sqrt(nprocXY)) + 1
      while (npy * math.floor(nprocXY/npy) ~= nprocXY) do
         npy = npy - 1
      end
      local npx = nprocXY / npy
      results[1] = { idx = 1, value = npx}
      results[2] = { idx = 2, value = npy}
      results[3] = { idx = 3, value = npz}
   end

   partition = { -1, -1, -1 }

   for i = 1, 3 do
      local idx   = results[i].idx
      local value = results[i].value
      partition[idx] = value
   end

   return partition

end
   




function main()

   local nProcs = arg[1]
   local fileSz = arg[2]
   local nVar   = arg[3] or 1

   local partition = partitionMesh({-1,-1,-1}, nProcs)

   fileSz = fileSz*1.0e9

   local gblSz = math.ceil(math.pow( fileSz / ( 8 * nVar), 1.0/3.0))

   for i = 1,3 do
      local n   = math.floor(gblSz / partition[i])
      local rem = math.mod(gblSz,  partition[i])
      if (


   local results = {}

   print("\nPartition: ",partition[1],partition[2],partition[3])
   print("nProcs:   ",nProcs, "\nProduct: ", partition[1]*partition[2]*partition[3],"\n")

   results[1] = { "Vars", "G-Elms", "G-Nodes", "G-DOFs", "L-Elms", "L-Nodes", "L-DOFs", "Face DOF", "Face Bytes"}
   results[2] = { "----", "------", "-------", "------", "------", "-------", "------", "--------", "----------"}

   for i = 1, #probT do
      results[#results+1] = computeSize(probT[i],partition, mesh)
   end

   local bt = BeautifulTbl:new{tbl=results}
   io.stdout:write(bt:build_tbl())
end

main()
