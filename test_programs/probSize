#!/usr/bin/env lua
-- -*- lua -*-
require("strict")
require("string_split")
require("VarDump")
local BeautifulTbl = require("BeautifulTbl")
local Dbg          = require("Dbg")
mesh               = {}
partition          = {}
nProcs             = nil

function partitionMesh(partition, nProcs)

   local dbg      = Dbg:dbg()
   dbg.start("partitionMesh()")
   dbg.print("nProcs: ", nProcs, "\n")
   local fixed    = {}
   local variable = {}
   local nvar     = 0
   local results  = {}

   for i = 1,3 do
      local n = partition[i]
      if (n < 0) then
         nvar           = nvar + 1
         variable[nvar] = i
      else
         fixed[#fixed+1] = i
      end
   end

   if (nvar == 0) then
      return partition
   elseif (nvar == 1) then
      results[1] = { idx = fixed[1],    value = partition[fixed[1]]}
      results[2] = { idx = fixed[2],    value = partition[fixed[2]]}
      results[3] = { idx = variable[1], value = nProcs/ (partition[fixed[1]]*partition[fixed[2]]) }
   elseif (nvar == 2) then
      results[1] = { idx = fixed[1],    value = partition[fixed[1]]}
      local np   = nProcs/partition[fixed[1]]
      local yp   = math.sqrt(np)
      local exp  = math.floor(math.log(yp)/math.log(2.0))
      local pb   = math.pow(2.0, exp) + 1
      while (pb * math.floor(nProcs/pb) ~= nProcs) do
         pb = pb - 1
      end
      results[2] = { idx = variable[1], value = np/pb}
      results[3] = { idx = variable[2], value = pb}
   else
      local npz = math.floor(math.pow(nProcs, 1.0/3.0)) + 1

      while (npz * math.floor(nProcs/npz) ~= nProcs) do
         dbg.print("npz: ",npz,"\n")
         npz = npz - 1
         if (npz < 0) then
            print ("failed to chose npz\n")
            os.exit(-1)
         end
      end
      local nprocXY = nProcs/npz
      local npy     = math.floor(math.sqrt(nprocXY)) + 1
      while (npy * math.floor(nprocXY/npy) ~= nprocXY) do
         npy = npy - 1
         if (npy < 0) then
            print ("failed to chose npy\n")
            os.exit(-1)
         end
      end
      local npx = nprocXY / npy
      results[1] = { idx = 1, value = npx}
      results[2] = { idx = 2, value = npy}
      results[3] = { idx = 3, value = npz}
   end

   partition = { -1, -1, -1 }

   for i = 1, 3 do
      local idx   = results[i].idx
      local value = results[i].value
      partition[idx] = value
   end

   dbg.fini()
   return partition

end
   




function main()

   local dbg = Dbg:dbg()

   if (arg[1] == "-d") then
      dbg:activateDebug(1)
      table.remove(arg,1)
   end
   

   local nProcs = tonumber(arg[1])
   local fileSz = tonumber(arg[2])
   local nVar   = tonumber(arg[3] or 1)

   local partition = partitionMesh({-1,-1,-1}, nProcs)

   fileSz = fileSz*(1024* 1024* 1024)

   local gblSz = math.ceil(math.pow( fileSz / ( 8 * nVar), 1.0/3.0))
   local n
   local rem
   local is
   local gridL = {}
   local gridG = {}
   local totalSz = 1
   local localSz = 1


   for i = 1,3 do
      n   = math.floor(gblSz / partition[i])
      rem = gblSz % partition[i]
      is  = 1
      if (rem > 0) then
         n = n + 1
      end
      gridL[i] = n
      gridG[i] = gblSz
      totalSz  = totalSz * gridG[i]
      localSz  = localSz * gridL[i]
   end

   totalSz = 8* totalSz * nVar/ (1024* 1024* 1024)
   localSz = 8* localSz * nVar/ (1024* 1024)

   local results = {}

   print("\nPartition: ",partition[1],partition[2],partition[3])
   print("nProcs:      ",nProcs, "\tProduct: ", partition[1]*partition[2]*partition[3],"\n")
   print("local grid:  ",gridL[1], gridL[2], gridL[3])
   print("global grid: ",gridG[1], gridG[2], gridG[3])

   print ("total Sz in (GB): ", totalSz)
   print ("local Sz in (MB): ", localSz)



   local lSz = math.ceil(math.pow(gridL[1] * gridL[2] * gridL[3], 1.0/3.0))

   totalSz = 1
   localSz = 1
   for i = 1, 3 do
      gridG[i] = partition[i]* lSz
      totalSz  = totalSz * gridG[i]
      localSz  = localSz * gridL[i]
   end
   totalSz = 8* totalSz * nVar/ (1024* 1024* 1024)
   localSz = 8* localSz * nVar/ (1024* 1024)

   print("\nPartition: ",partition[1],partition[2],partition[3])
   print("nProcs:      ",nProcs, "\tProduct: ", partition[1]*partition[2]*partition[3],"\n")
   print("local grid:  ", lSz, lSz , lSz)
   print("global grid: ",gridG[1], gridG[2], gridG[3])
   
   print ("total Sz in (GB): ", totalSz)
   print ("local Sz in (MB): ", localSz)



end

main()
